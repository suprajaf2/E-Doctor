{"ast":null,"code":"import React,{useState}from'react';import{useNavigate}from'react-router-dom';import'./Login.css';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";function Login(){const[username,setUsername]=useState('');const[password,setPassword]=useState('');const navigate=useNavigate();// Hardcoded admin credentials\nconst adminCredentials={username:'admin',// Admin username\npassword:'admin123'// Admin password\n};// Handle forgot password logic (for now, just logging the action)\nconst handleForgotPassword=()=>{alert('Forgot password functionality not implemented yet.');// You can replace this with actual logic for sending a reset link or emailing the user\n};const handleLogin=e=>{e.preventDefault();// Check for admin login\nif(username===adminCredentials.username&&password===adminCredentials.password){// Admin login successful, navigate to dashboard\nconsole.log(\"Admin login successful\",username);alert('Admin login successful!');navigate('/dashboard');// Redirect to the admin dashboard\nreturn;// Exit the function here to prevent further checks for other users\n}// Retrieve the stored user data from localStorage for normal users\nconst storedUser=JSON.parse(localStorage.getItem('user'));// Validate the login credentials for normal users\nif(storedUser&&storedUser.username===username&&storedUser.password===password){console.log(\"Login successful:\",storedUser);alert('Login successful!');navigate('/dashboard');// Redirect to the dashboard\n}else{console.log(\"Login failed. Invalid username or password.\");alert('Invalid username or password!');}};return/*#__PURE__*/_jsx(\"div\",{className:\"login-container\",children:/*#__PURE__*/_jsxs(\"form\",{className:\"login-form\",onSubmit:handleLogin,children:[/*#__PURE__*/_jsx(\"h2\",{children:\"Login\"}),/*#__PURE__*/_jsx(\"label\",{htmlFor:\"username\",children:\"Username\"}),/*#__PURE__*/_jsx(\"input\",{type:\"text\",id:\"username\",name:\"username\",value:username,onChange:e=>setUsername(e.target.value),required:true}),/*#__PURE__*/_jsx(\"label\",{htmlFor:\"password\",children:\"Password\"}),/*#__PURE__*/_jsx(\"input\",{type:\"password\",id:\"password\",name:\"password\",value:password,onChange:e=>setPassword(e.target.value),required:true}),/*#__PURE__*/_jsx(\"button\",{type:\"submit\",children:\"Login\"}),/*#__PURE__*/_jsxs(\"p\",{children:[\"New user? \",/*#__PURE__*/_jsx(\"a\",{href:\"/register\",children:\"Register here\"})]}),/*#__PURE__*/_jsx(\"button\",{type:\"button\",onClick:handleForgotPassword,className:\"forgot-password-button\",children:\"Forgot Password?\"})]})});}export default Login;","map":{"version":3,"names":["React","useState","useNavigate","jsx","_jsx","jsxs","_jsxs","Login","username","setUsername","password","setPassword","navigate","adminCredentials","handleForgotPassword","alert","handleLogin","e","preventDefault","console","log","storedUser","JSON","parse","localStorage","getItem","className","children","onSubmit","htmlFor","type","id","name","value","onChange","target","required","href","onClick"],"sources":["D:/Infosys  E-doctor (2)/Infosys  E-doctor/src/components/Login.jsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport './Login.css';\r\n\r\nfunction Login() {\r\n  const [username, setUsername] = useState('');\r\n  const [password, setPassword] = useState('');\r\n  const navigate = useNavigate();\r\n\r\n  // Hardcoded admin credentials\r\n  const adminCredentials = {\r\n    username: 'admin', // Admin username\r\n    password: 'admin123', // Admin password\r\n  };\r\n\r\n  // Handle forgot password logic (for now, just logging the action)\r\n  const handleForgotPassword = () => {\r\n    alert('Forgot password functionality not implemented yet.');\r\n    // You can replace this with actual logic for sending a reset link or emailing the user\r\n  };\r\n\r\n  const handleLogin = (e) => {\r\n    e.preventDefault();\r\n\r\n    // Check for admin login\r\n    if (username === adminCredentials.username && password === adminCredentials.password) {\r\n      // Admin login successful, navigate to dashboard\r\n      console.log(\"Admin login successful\",username);\r\n      alert('Admin login successful!');\r\n      navigate('/dashboard');  // Redirect to the admin dashboard\r\n      return; // Exit the function here to prevent further checks for other users\r\n    }\r\n\r\n    // Retrieve the stored user data from localStorage for normal users\r\n    const storedUser = JSON.parse(localStorage.getItem('user'));\r\n\r\n    // Validate the login credentials for normal users\r\n    if (storedUser && storedUser.username === username && storedUser.password === password) {\r\n      console.log(\"Login successful:\", storedUser);\r\n      alert('Login successful!');\r\n      navigate('/dashboard');  // Redirect to the dashboard\r\n    } else {\r\n      console.log(\"Login failed. Invalid username or password.\");\r\n      alert('Invalid username or password!');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"login-container\">\r\n      <form className=\"login-form\" onSubmit={handleLogin}>\r\n        <h2>Login</h2>\r\n        <label htmlFor=\"username\">Username</label>\r\n        <input\r\n          type=\"text\"\r\n          id=\"username\"\r\n          name=\"username\"\r\n          value={username}\r\n          onChange={(e) => setUsername(e.target.value)}\r\n          required\r\n        />\r\n        <label htmlFor=\"password\">Password</label>\r\n        <input\r\n          type=\"password\"\r\n          id=\"password\"\r\n          name=\"password\"\r\n          value={password}\r\n          onChange={(e) => setPassword(e.target.value)}\r\n          required\r\n        />\r\n        <button type=\"submit\">Login</button>\r\n        <p>New user? <a href=\"/register\">Register here</a></p>\r\n\r\n        {/* Forgot Password button */}\r\n        <button type=\"button\" onClick={handleForgotPassword} className=\"forgot-password-button\">\r\n          Forgot Password?\r\n        </button>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Login;\r\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,QAAQ,KAAQ,OAAO,CACvC,OAASC,WAAW,KAAQ,kBAAkB,CAC9C,MAAO,aAAa,CAAC,OAAAC,GAAA,IAAAC,IAAA,CAAAC,IAAA,IAAAC,KAAA,yBAErB,QAAS,CAAAC,KAAKA,CAAA,CAAG,CACf,KAAM,CAACC,QAAQ,CAAEC,WAAW,CAAC,CAAGR,QAAQ,CAAC,EAAE,CAAC,CAC5C,KAAM,CAACS,QAAQ,CAAEC,WAAW,CAAC,CAAGV,QAAQ,CAAC,EAAE,CAAC,CAC5C,KAAM,CAAAW,QAAQ,CAAGV,WAAW,CAAC,CAAC,CAE9B;AACA,KAAM,CAAAW,gBAAgB,CAAG,CACvBL,QAAQ,CAAE,OAAO,CAAE;AACnBE,QAAQ,CAAE,UAAY;AACxB,CAAC,CAED;AACA,KAAM,CAAAI,oBAAoB,CAAGA,CAAA,GAAM,CACjCC,KAAK,CAAC,oDAAoD,CAAC,CAC3D;AACF,CAAC,CAED,KAAM,CAAAC,WAAW,CAAIC,CAAC,EAAK,CACzBA,CAAC,CAACC,cAAc,CAAC,CAAC,CAElB;AACA,GAAIV,QAAQ,GAAKK,gBAAgB,CAACL,QAAQ,EAAIE,QAAQ,GAAKG,gBAAgB,CAACH,QAAQ,CAAE,CACpF;AACAS,OAAO,CAACC,GAAG,CAAC,wBAAwB,CAACZ,QAAQ,CAAC,CAC9CO,KAAK,CAAC,yBAAyB,CAAC,CAChCH,QAAQ,CAAC,YAAY,CAAC,CAAG;AACzB,OAAQ;AACV,CAEA;AACA,KAAM,CAAAS,UAAU,CAAGC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC,CAAC,CAE3D;AACA,GAAIJ,UAAU,EAAIA,UAAU,CAACb,QAAQ,GAAKA,QAAQ,EAAIa,UAAU,CAACX,QAAQ,GAAKA,QAAQ,CAAE,CACtFS,OAAO,CAACC,GAAG,CAAC,mBAAmB,CAAEC,UAAU,CAAC,CAC5CN,KAAK,CAAC,mBAAmB,CAAC,CAC1BH,QAAQ,CAAC,YAAY,CAAC,CAAG;AAC3B,CAAC,IAAM,CACLO,OAAO,CAACC,GAAG,CAAC,6CAA6C,CAAC,CAC1DL,KAAK,CAAC,+BAA+B,CAAC,CACxC,CACF,CAAC,CAED,mBACEX,IAAA,QAAKsB,SAAS,CAAC,iBAAiB,CAAAC,QAAA,cAC9BrB,KAAA,SAAMoB,SAAS,CAAC,YAAY,CAACE,QAAQ,CAAEZ,WAAY,CAAAW,QAAA,eACjDvB,IAAA,OAAAuB,QAAA,CAAI,OAAK,CAAI,CAAC,cACdvB,IAAA,UAAOyB,OAAO,CAAC,UAAU,CAAAF,QAAA,CAAC,UAAQ,CAAO,CAAC,cAC1CvB,IAAA,UACE0B,IAAI,CAAC,MAAM,CACXC,EAAE,CAAC,UAAU,CACbC,IAAI,CAAC,UAAU,CACfC,KAAK,CAAEzB,QAAS,CAChB0B,QAAQ,CAAGjB,CAAC,EAAKR,WAAW,CAACQ,CAAC,CAACkB,MAAM,CAACF,KAAK,CAAE,CAC7CG,QAAQ,MACT,CAAC,cACFhC,IAAA,UAAOyB,OAAO,CAAC,UAAU,CAAAF,QAAA,CAAC,UAAQ,CAAO,CAAC,cAC1CvB,IAAA,UACE0B,IAAI,CAAC,UAAU,CACfC,EAAE,CAAC,UAAU,CACbC,IAAI,CAAC,UAAU,CACfC,KAAK,CAAEvB,QAAS,CAChBwB,QAAQ,CAAGjB,CAAC,EAAKN,WAAW,CAACM,CAAC,CAACkB,MAAM,CAACF,KAAK,CAAE,CAC7CG,QAAQ,MACT,CAAC,cACFhC,IAAA,WAAQ0B,IAAI,CAAC,QAAQ,CAAAH,QAAA,CAAC,OAAK,CAAQ,CAAC,cACpCrB,KAAA,MAAAqB,QAAA,EAAG,YAAU,cAAAvB,IAAA,MAAGiC,IAAI,CAAC,WAAW,CAAAV,QAAA,CAAC,eAAa,CAAG,CAAC,EAAG,CAAC,cAGtDvB,IAAA,WAAQ0B,IAAI,CAAC,QAAQ,CAACQ,OAAO,CAAExB,oBAAqB,CAACY,SAAS,CAAC,wBAAwB,CAAAC,QAAA,CAAC,kBAExF,CAAQ,CAAC,EACL,CAAC,CACJ,CAAC,CAEV,CAEA,cAAe,CAAApB,KAAK","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}